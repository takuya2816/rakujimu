# Stack:LINE-UseCase-Kuraberu-Batch
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  kuraberu-batch

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    MemorySize: 128
    Timeout: 30

Parameters:
  Environment:
    Type: String
    AllowedValues:
      - dev
      - prod
    Default: dev

Mappings:
  EnvironmentMap:
    dev:
      LINEChannelAccessTokenDBName: LINEChannelAccessToken
      EventBridgeName: Line-ShortTermAccessToken-Update
      LayerVersion: 4
      LoggerLevel: DEBUG
      # TTL is True:Reservation Data will be deleted at the specified date, False:Data will not be deleted
      TTL: False
      # Set day to delete data
      # If you set TTL: True, data will be deleted in the period specified below.
      # Even if you set TTL: False, please set int value.
      TTLDay: 10
    prod:
      LINEChannelAccessTokenDBName: LINEChannelAccessTokenLiff
      EventBridgeName: Line-ShortTermAccessToken-Update-Liff
      LayerVersion: Layer Version
      LoggerLevel: DEBUG or INFO
      # TTL is True:Reservation Data will be deleted at the specified date, False:Data will not be deleted
      TTL: False or True
      TTLDay: Set day to delete data

Resources:
  # TODO:confirm settings
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyName: CloudWatchAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/Kuraberu-*:*:*"
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/Kuraberu-*:*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - ssm:GetParameters
                Resource: "*"
        - PolicyName: DynamoTableAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:UpdateItem
                  - dynamodb:Scan
                  - dynamodb:PutItem
                  - logs:CreateLogStream
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}*:*"
                  - !GetAtt LINEChannelAccessTokenDB.Arn
      RoleName: !Sub "${AWS::StackName}-LambdaRole"

  LINEChannelAccessTokenDB:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        - AttributeName: "channelId"
          AttributeType: S
      TableName:
        !FindInMap [
          EnvironmentMap,
          !Ref Environment,
          LINEChannelAccessTokenDBName,
        ]
      SSESpecification:
        SSEEnabled: True
      KeySchema:
        - AttributeName: "channelId"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  PutAccessToken:
    Type: "AWS::Serverless::Function"
    Properties:
      Handler: update_line_access_token.lambda_handler
      Runtime: python3.8
      CodeUri: update_line_access_token/
      FunctionName: !Sub Kuraberu-PutAccessToken-${Environment}
      Description: ""
      Layers:
        - !Join
          - ":"
          - - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:layer"
            - !ImportValue KuraberuLayerDev
            - !FindInMap [EnvironmentMap, !Ref Environment, LayerVersion]
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          LOGGER_LEVEL:
            !FindInMap [EnvironmentMap, !Ref Environment, LoggerLevel]
          CHANNEL_ACCESS_TOKEN_DB: !Ref LINEChannelAccessTokenDB

  # TODO：バッチ機能の作動
  EventBridge:
    Type: AWS::Events::Rule
    Properties:
      Description: Check&Update for ShortTermAccessToken
      # EventBusName: String
      # EventPattern: Json
      Name: !FindInMap [EnvironmentMap, !Ref Environment, EventBridgeName]
      # RoleArn: String
      ScheduleExpression: cron(0 0 * * ? *)
      State: ENABLED
      Targets:
        - Arn: !GetAtt PutAccessToken.Arn
          Id: TargetFunctionV1
  # lambdaを動かす際の許可, Principal指定した場合に許可される
  PutAccessTokenFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref PutAccessToken
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt EventBridge.Arn

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/
  LambdaLayer:
    Description: "Used Layer at Function"
    Value: !Join
      - ":"
      - - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:layer"
        - !ImportValue KuraberuLayerDev
        - !FindInMap [EnvironmentMap, !Ref Environment, LayerVersion]
  LINEChannelAccessTokenDB:
    Description: "DynamoDB ARN for LINEChannelAccessToken"
    Value: !GetAtt LINEChannelAccessTokenDB.Arn
